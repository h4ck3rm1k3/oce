// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _ShapeInterference_Interference_HeaderFile
#define _ShapeInterference_Interference_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _ShapeInterference_SequenceOfInterfObj_HeaderFile
#include <ShapeInterference_SequenceOfInterfObj.hxx>
#endif
#ifndef _Handle_ShapeInterference_InterfObj_HeaderFile
#include <Handle_ShapeInterference_InterfObj.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class ShapeInterference_InterfObj;
class ShapeInterference_SequenceOfInterfObj;
class TopoDS_Shape;



class ShapeInterference_Interference  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  //! Empty constructor. <br>
  Standard_EXPORT   ShapeInterference_Interference();
  //! Empties field mySeqOfInterfObj. <br>
  Standard_EXPORT     void Empty() ;
  //! Stores the interference's elementary object in <br>
//!          the the data structure. <br>
  Standard_EXPORT     void AddInterfObj(const Handle(ShapeInterference_InterfObj)& anInterfObject) ;
  //! Sets field <hasInclusion> to True. <br>
  Standard_EXPORT     void SetInclusion() ;
  //! Returns the number of interference objects. <br>
  Standard_EXPORT     Standard_Integer GetInterfNbr() const;
  //! Returns the interference object of given index. <br>
//!          Raises out of range if <anIndex> is not in range <br>
//!          <1 .. InterfNbr>. <br>
  Standard_EXPORT     Handle_ShapeInterference_InterfObj GetInterfObj(const Standard_Integer anIndex) const;
  //! Returns True if there is at least one contact. <br>
  Standard_EXPORT     Standard_Boolean HasTangency() const;
  //! Returns True if there is at least one collision. <br>
  Standard_EXPORT     Standard_Boolean HasCollision() const;
  //! Returns True if one of the parents is contained <br>
//!          in the other. <br>
  Standard_EXPORT     Standard_Boolean HasInclusion() const;
  //! Returns the number of tangencies. <br>
  Standard_EXPORT     Standard_Integer GetTangencyNbr() const;
  //! Returns the number of collisions. <br>
  Standard_EXPORT     Standard_Integer GetCollisionNbr() const;
  //! Returns in <aSequence> the sequence of tangencies. <br>
  Standard_EXPORT     void GetSeqOfTangencies(ShapeInterference_SequenceOfInterfObj& aSequence) const;
  //! Returns in <aSequence> the sequence of collisions. <br>
  Standard_EXPORT     void GetSeqOfCollisions(ShapeInterference_SequenceOfInterfObj& aSequence) const;
  //! Returns the compound of sections computed for <br>
//!          the interference. <br>
  Standard_EXPORT     TopoDS_Shape GetAllSections() const;





protected:





private:



Standard_Boolean hasInclusion;
ShapeInterference_SequenceOfInterfObj mySeqOfInterfObj;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
